input {
file {
  type => "resourcemanagermetrics"
    start_position => "beginning"
    path => [ "/elk_ubu/log/hadoop/resourcemanager.log" ]
  }
}
filter {
  if [type] == "resourcemanagermetrics" {
    grok {
      patterns_dir => "/etc/logstash/conf.d/patterns"
      match => [
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{CONTEXT}, %{PROCESSNAME}, %{SESSIONID}, %{HOSTNAME}, %{MEMNONHEAPUSEDM}, %{MEMNONHEAPCOMMITTEDM}, %{MEMNONHEAPMAXM}, %{MEMHEAPUSEDM}, %{MEMHEAPCOMMITTEDM}, %{MEMHEAPMAXM}, %{MEMMAXM}, %{GCCOUNTPS} %{SCAVENGE}, %{GCTIMEMILLISPS} %{SCAVENGE}, %{GCCOUNTPS} %{MARKSWEEP}, %{GCTIMEMILLISPS} %{MARKSWEEP}, %{GCCOUNT}, %{GCTIMEMILLIS}, %{THREADSNEW}, %{THREADSRUNNABLE}, %{THREADSBLOCKED}, %{THREADSWAITING}, %{THREADSTIMEDWAITING}, %{THREADSTERMINATED}, %{LOGFATAL}, %{LOGERROR}, %{LOGWARN}, %{LOGINFO}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{CLUSTERMETRICS}, %{CONTEXT}, %{HOSTNAME}, %{NUMACTIVENMS}, %{NUMDECOMMISSIONEDNMS}, %{NUMLOSTNMS}, %{NUMUNHEALTHYNMS}, %{NUMREBOOTEDNMS}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{QUEUE}, %{CONTEXT}, %{HOSTNAME}, %{RUNNING_0}, %{RUNNING_60}, %{RUNNING_300}, %{RUNNING_1440}, %{APPSSUBMITTED}, %{APPSRUNNING}, %{APPSPENDING}, %{APPSCOMPLETED}, %{APPSKILLED}, %{APPSFAILED}, %{ALLOCATEDMB}, %{ALLOCATEDVCORES}, %{ALLOCATEDCONTAINERS}, %{AGGREGATECONTAINERSALLOCATED}, %{AGGREGATECONTAINERSRELEASED}, %{AVAILABLEMB}, %{AVAILABLEVCORES}, %{PENDINGMB}, %{PENDINGVCORES}, %{PENDINGCONTAINERS}, %{RESERVEDMB}, %{RESERVEDVCORES}, %{RESERVEDCONTAINERS}, %{ACTIVEUSERS}, %{ACTIVEAPPLICATIONS}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{PORT}, %{CONTEXT}, %{HOSTNAME}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{CONTEXT}, %{HOSTNAME}, %{LOGINSUCCESSNUMOPS}, %{LOGINSUCCESSAVGTIME}, %{LOGINFAILURENUMOPS}, %{LOGINFAILUREAVGTIME}, %{GETGROUPSNUMOPS}, %{GETGROUPSAVGTIME}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{CONTEXT}, %{HOSTNAME}, %{NUMACTIVESOURCES}, %{NUMALLSOURCES}, %{NUMACTIVESINKS}, %{NUMALLSINKS}, %{SINK_FOONUMOPS}, %{SINK_FOOAVGTIME}, %{SINK_FOODROPPED}, %{SINK_FOOQSIZE}, %{SNAPSHOTNUMOPS}, %{SNAPSHOTAVGTIME}, %{PUBLISHNUMOPS}, %{PUBLISHAVGTIME}, %{DROPPEDPUBALL}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{PORT}, %{CONTEXT}, %{HOSTNAME}, %{RECEIVEDBYTES}, %{SENTBYTES}, %{RPCQUEUETIMENUMOPS}, %{RPCQUEUETIMEAVGTIME}, %{RPCPROCESSINGTIMENUMOPS}, %{RPCPROCESSINGTIMEAVGTIME}, %{RPCAUTHENTICATIONFAILURES}, %{RPCAUTHENTICATIONSUCCESSES}, %{RPCAUTHORIZATIONFAILURES}, %{RPCAUTHORIZATIONSUCCESSES}, %{NUMOPENCONNECTIONS}, %{CALLQUEUELENGTH}"
			]
    }
    ruby {
      code => '
          require "time"
          event["heatmap"] = Time.parse(event["@timestamp"].to_s).strftime "%u-" + (Time.parse(event["@timestamp"].to_s).strftime "%a") + (Time.parse(event["@timestamp"].to_s).strftime ":%H-") + ((Time.parse(event["@timestamp"].to_s) + 60*60).strftime "%H");
		'
		}
	}
}
