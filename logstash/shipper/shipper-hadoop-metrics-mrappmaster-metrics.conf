input {
file {
  type => "mrappmaster-metrics"
    start_position => "beginning"
    path => [ "/amb/log/hadoop-metrics/mrappmaster-metrics.out" ]
  }
}
filter {
  if [type] == "mrappmaster-metrics" {
    grok {
      patterns_dir => "/etc/logstash/conf.d/patterns"
      match => [
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{CONTEXT}, %{PROCESSNAME}, %{SESSIONID}, %{HOSTNAME}, %{MEMNONHEAPUSEDM}, %{MEMNONHEAPCOMMITTEDM}, %{MEMNONHEAPMAXM}, %{MEMHEAPUSEDM}, %{MEMHEAPCOMMITTEDM}, %{MEMHEAPMAXM}, %{MEMMAXM}, %{GCCOUNTPS} %{SCAVENGE}, %{GCTIMEMILLISPS} %{SCAVENGE}, %{GCCOUNTPS} %{MARKSWEEP}, %{GCTIMEMILLISPS} %{MARKSWEEP}, %{GCCOUNT}, %{GCTIMEMILLIS}, %{THREADSNEW}, %{THREADSRUNNABLE}, %{THREADSBLOCKED}, %{THREADSWAITING}, %{THREADSTIMEDWAITING}, %{THREADSTERMINATED}, %{LOGFATAL}, %{LOGERROR}, %{LOGWARN}, %{LOGINFO}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{CONTEXT}, %{HOSTNAME}, %{JOBSSUBMITTED}, %{JOBSCOMPLETED}, %{JOBSFAILED}, %{JOBSKILLED}, %{JOBSPREPARING}, %{JOBSRUNNING}, %{MAPSLAUNCHED}, %{MAPSCOMPLETED}, %{MAPSFAILED}, %{MAPSKILLED}, %{MAPSRUNNING}, %{MAPSWAITING}, %{REDUCESLAUNCHED}, %{REDUCESCOMPLETED}, %{REDUCESFAILED}, %{REDUCESKILLED}, %{REDUCESRUNNING}, %{REDUCESWAITING}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{PORT}, %{CONTEXT}, %{HOSTNAME}, %{DONENUMOPS}, %{DONEAVGTIME}, %{FATALERRORNUMOPS}, %{FATALERRORAVGTIME}, %{GETTASKNUMOPS}, %{GETTASKAVGTIME}, %{CANCOMMITNUMOPS}, %{CANCOMMITAVGTIME}, %{PINGNUMOPS}, %{PINGAVGTIME}, %{REPORTDIAGNOSTICINFONUMOPS}, %{REPORTDIAGNOSTICINFOAVGTIME}, %{STATUSUPDATENUMOPS}, %{STATUSUPDATEAVGTIME}, %{REPORTNEXTRECORDRANGENUMOPS}, %{REPORTNEXTRECORDRANGEAVGTIME}, %{COMMITPENDINGNUMOPS}, %{COMMITPENDINGAVGTIME}, %{FSERRORNUMOPS}, %{FSERRORAVGTIME}, %{SHUFFLEERRORNUMOPS}, %{SHUFFLEERRORAVGTIME}, %{GETMAPCOMPLETIONEVENTSNUMOPS}, %{GETMAPCOMPLETIONEVENTSAVGTIME}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{CONTEXT}, %{HOSTNAME}, %{LOGINSUCCESSNUMOPS}, %{LOGINSUCCESSAVGTIME}, %{LOGINFAILURENUMOPS}, %{LOGINFAILUREAVGTIME}, %{GETGROUPSNUMOPS}, %{GETGROUPSAVGTIME}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{CONTEXT}, %{HOSTNAME}, %{NUMACTIVESOURCES}, %{NUMALLSOURCES}, %{NUMACTIVESINKS}, %{NUMALLSINKS}, %{SINK_LOGSTASHNUMOPS}, %{SINK_LOGSTASHAVGTIME}, %{SINK_LOGSTASHDROPPED}, %{SINK_LOGSTASHQSIZE}, %{SNAPSHOTNUMOPS}, %{SNAPSHOTAVGTIME}, %{PUBLISHNUMOPS}, %{PUBLISHAVGTIME}, %{DROPPEDPUBALL}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{PORT}, %{CONTEXT}, %{HOSTNAME}, %{RECEIVEDBYTES}, %{SENTBYTES}, %{RPCQUEUETIMENUMOPS}, %{RPCQUEUETIMEAVGTIME}, %{RPCPROCESSINGTIMENUMOPS}, %{RPCPROCESSINGTIMEAVGTIME}, %{RPCAUTHENTICATIONFAILURES}, %{RPCAUTHENTICATIONSUCCESSES}, %{RPCAUTHORIZATIONFAILURES}, %{RPCAUTHORIZATIONSUCCESSES}, %{NUMOPENCONNECTIONS}, %{CALLQUEUELENGTH}"
			]
    }
    ruby {
      code => '
          require "time"
          event["heatmap"] = Time.parse(event["@timestamp"].to_s).strftime "%u-" + (Time.parse(event["@timestamp"].to_s).strftime "%a") + (Time.parse(event["@timestamp"].to_s).strftime ":%H-") + ((Time.parse(event["@timestamp"].to_s) + 60*60).strftime "%H");
		'
		}
	mutate {
		convert => [
			"MapsKilled", "integer",
			"DroppedPubAll", "integer",
			"NumAllSinks", "integer",
			"GetTaskNumOps", "integer",
			"LoginFailureNumOps", "integer",
			"ReducesRunning", "integer",
			"JobsCompleted", "integer",
			"ReducesKilled", "integer",
			"JobsPreparing", "integer",
			"ThreadsTimedWaiting", "integer",
			"ReportDiagnosticInfoNumOps", "integer",
			"MapsFailed", "integer",
			"ThreadsTerminated", "integer",
			"NumActiveSources", "integer",
			"SnapshotNumOps", "integer",
			"port", "integer",
			"JobsRunning", "integer",
			"GcTimeMillis", "integer",
			"ReducesCompleted", "integer",
			"RpcAuthenticationSuccesses", "integer",
			"NumActiveSinks", "integer",
			"GetJobReportNumOps", "integer",
			"PublishNumOps", "integer",
			"JobsSubmitted", "integer",
			"StatusUpdateNumOps", "integer",
			"ReducesLaunched", "integer",
			"ReportNextRecordRangeNumOps", "integer",
			"MapsRunning", "integer",
			"SentBytes", "integer",
			"MapsLaunched", "integer",
			"GetCountersNumOps", "integer",
			"ThreadsBlocked", "integer",
			"RpcAuthenticationFailures", "integer",
			"LogWarn", "integer",
			"LogError", "integer",
			"GetMapCompletionEventsNumOps", "integer",
			"FsErrorNumOps", "integer",
			"CanCommitNumOps", "integer",
			"GetGroupsNumOps", "integer",
			"FatalErrorNumOps", "integer",
			"CommitPendingNumOps", "integer",
			"MapsCompleted", "integer",
			"DoneNumOps", "integer",
			"NumAllSources", "integer",
			"RpcAuthorizationSuccesses", "integer",
			"GetTaskAttemptCompletionEventsNumOps", "integer",
			"MarkSweep", "integer",
			"ThreadsNew", "integer",
			"Scavenge", "integer",
			"ThreadsRunnable", "integer",
			"NumOpenConnections", "integer",
			"GcCount", "integer",
			"RpcAuthorizationFailures", "integer",
			"PingNumOps", "integer",
			"JobsKilled", "integer",
			"LoginSuccessNumOps", "integer",
			"RpcProcessingTimeNumOps", "integer",
			"ThreadsWaiting", "integer",
			"Sink_logstashNumOps", "integer",
			"RpcQueueTimeNumOps", "integer",
			"Sink_logstashDropped", "integer",
			"Sink_logstashQsize", "integer",
			"MapsWaiting", "integer",
			"ReceivedBytes", "integer",
			"ReducesWaiting", "integer",
			"LogInfo", "integer",
			"CallQueueLength", "integer",
			"ReducesFailed", "integer",
			"LogFatal", "integer",
			"JobsFailed", "integer",
			"ShuffleErrorNumOps", "integer"		]
		}
	}
}
