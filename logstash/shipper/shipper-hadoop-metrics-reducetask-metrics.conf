input {
file {
  type => "reducetask-metrics"
    start_position => "beginning"
    path => [ "/amb/log/hadoop-yarn/metrics/reducetask-metrics.out" ]
  }
}
filter {
  if [type] == "reducetask-metrics" {
    grok {
      patterns_dir => "/etc/logstash/conf.d/patterns"
      match => [
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{CONTEXT}, %{HOSTNAME}, %{NUMACTIVESOURCES}, %{NUMALLSOURCES}, %{NUMACTIVESINKS}, %{NUMALLSINKS}, %{SINK_LOGSTASHNUMOPS}, %{SINK_LOGSTASHAVGTIME}, %{SINK_LOGSTASHDROPPED}, %{SINK_LOGSTASHQSIZE}, %{SNAPSHOTNUMOPS}, %{SNAPSHOTAVGTIME}, %{PUBLISHNUMOPS}, %{PUBLISHAVGTIME}, %{DROPPEDPUBALL}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{CONTEXT}, %{HOSTNAME}, %{LOGINSUCCESSNUMOPS}, %{LOGINSUCCESSAVGTIME}, %{LOGINFAILURENUMOPS}, %{LOGINFAILUREAVGTIME}, %{GETGROUPSNUMOPS}, %{GETGROUPSAVGTIME}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{CONTEXT}, %{PROCESSNAME}, %{SESSIONID}, %{HOSTNAME}, %{MEMNONHEAPUSEDM}, %{MEMNONHEAPCOMMITTEDM}, %{MEMNONHEAPMAXM}, %{MEMHEAPUSEDM}, %{MEMHEAPCOMMITTEDM}, %{MEMHEAPMAXM}, %{MEMMAXM}, %{GCCOUNTPS} %{SCAVENGE}, %{GCTIMEMILLISPS} %{SCAVENGE}, %{GCCOUNTPS} %{MARKSWEEP}, %{GCTIMEMILLISPS} %{MARKSWEEP}, %{GCCOUNT}, %{GCTIMEMILLIS}, %{THREADSNEW}, %{THREADSRUNNABLE}, %{THREADSBLOCKED}, %{THREADSWAITING}, %{THREADSTIMEDWAITING}, %{THREADSTERMINATED}, %{LOGFATAL}, %{LOGERROR}, %{LOGWARN}, %{LOGINFO}"
			]
    }
    ruby {
      code => '
          require "time"
          event["heatmap"] = Time.parse(event["@timestamp"].to_s).strftime "%u-" + (Time.parse(event["@timestamp"].to_s).strftime "%a") + (Time.parse(event["@timestamp"].to_s).strftime ":%H-") + ((Time.parse(event["@timestamp"].to_s) + 60*60).strftime "%H");
		'
		}
	mutate {
		convert => [
			"DroppedPubAll", "integer",
			"NumAllSinks", "integer",
			"LoginFailureNumOps", "integer",
			"LoginSuccessNumOps", "integer",
			"ThreadsTimedWaiting", "integer",
			"NumActiveSources", "integer",
			"ThreadsTerminated", "integer",
			"GcTimeMillis", "integer",
			"PublishNumOps", "integer",
			"SnapshotNumOps", "integer",
			"ThreadsBlocked", "integer",
			"LogWarn", "integer",
			"LogError", "integer",
			"GetGroupsNumOps", "integer",
			"NumAllSources", "integer",
			"NumActiveSinks", "integer",
			"MarkSweep", "integer",
			"ThreadsNew", "integer",
			"Scavenge", "integer",
			"ThreadsRunnable", "integer",
			"GcCount", "integer",
			"ThreadsWaiting", "integer",
			"Sink_logstashNumOps", "integer",
			"Sink_logstashDropped", "integer",
			"Sink_logstashQsize", "integer",
			"LogInfo", "integer",
			"LogFatal", "integer"		]
		}
	}
}
