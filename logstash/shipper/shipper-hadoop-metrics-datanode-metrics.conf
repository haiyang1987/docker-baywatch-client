input {
file {
  type => "datanode-metrics"
    start_position => "beginning"
    path => [ "/amb/log/hadoop-yarn/metrics/datanode-metrics.out" ]
  }
}
filter {
  if [type] == "datanode-metrics" {
    grok {
      patterns_dir => "/etc/logstash/conf.d/patterns"
      match => [
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{CONTEXT}, %{PROCESSNAME}, %{SESSIONID}, %{HOSTNAME}, %{MEMNONHEAPUSEDM}, %{MEMNONHEAPCOMMITTEDM}, %{MEMNONHEAPMAXM}, %{MEMHEAPUSEDM}, %{MEMHEAPCOMMITTEDM}, %{MEMHEAPMAXM}, %{MEMMAXM}, %{GCCOUNTPS} %{SCAVENGE}, %{GCTIMEMILLISPS} %{SCAVENGE}, %{GCCOUNTPS} %{MARKSWEEP}, %{GCTIMEMILLISPS} %{MARKSWEEP}, %{GCCOUNT}, %{GCTIMEMILLIS}, %{THREADSNEW}, %{THREADSRUNNABLE}, %{THREADSBLOCKED}, %{THREADSWAITING}, %{THREADSTIMEDWAITING}, %{THREADSTERMINATED}, %{LOGFATAL}, %{LOGERROR}, %{LOGWARN}, %{LOGINFO}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{PORT}, %{CONTEXT}, %{HOSTNAME}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{CONTEXT}, %{HOSTNAME}, %{LOGINSUCCESSNUMOPS}, %{LOGINSUCCESSAVGTIME}, %{LOGINFAILURENUMOPS}, %{LOGINFAILUREAVGTIME}, %{GETGROUPSNUMOPS}, %{GETGROUPSAVGTIME}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{CONTEXT}, %{HOSTNAME}, %{NUMACTIVESOURCES}, %{NUMALLSOURCES}, %{NUMACTIVESINKS}, %{NUMALLSINKS}, %{SINK_LOGSTASHNUMOPS}, %{SINK_LOGSTASHAVGTIME}, %{SINK_LOGSTASHDROPPED}, %{SINK_LOGSTASHQSIZE}, %{SNAPSHOTNUMOPS}, %{SNAPSHOTAVGTIME}, %{PUBLISHNUMOPS}, %{PUBLISHAVGTIME}, %{DROPPEDPUBALL}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{PORT}, %{CONTEXT}, %{HOSTNAME}, %{RECEIVEDBYTES}, %{SENTBYTES}, %{RPCQUEUETIMENUMOPS}, %{RPCQUEUETIMEAVGTIME}, %{RPCPROCESSINGTIMENUMOPS}, %{RPCPROCESSINGTIMEAVGTIME}, %{RPCAUTHENTICATIONFAILURES}, %{RPCAUTHENTICATIONSUCCESSES}, %{RPCAUTHORIZATIONFAILURES}, %{RPCAUTHORIZATIONSUCCESSES}, %{NUMOPENCONNECTIONS}, %{CALLQUEUELENGTH}",
				"message", "%{WORD:time} %{JAVACLASS:yarnClass}: %{SESSIONID}, %{CONTEXT}, %{HOSTNAME}, %{BYTESWRITTEN}, %{BYTESREAD}, %{BLOCKSWRITTEN}, %{BLOCKSREAD}, %{BLOCKSREPLICATED}, %{BLOCKSREMOVED}, %{BLOCKSVERIFIED}, %{BLOCKVERIFICATIONFAILURES}, %{BLOCKSCACHED}, %{BLOCKSUNCACHED}, %{READSFROMLOCALCLIENT}, %{READSFROMREMOTECLIENT}, %{WRITESFROMLOCALCLIENT}, %{WRITESFROMREMOTECLIENT}, %{BLOCKSGETLOCALPATHINFO}, %{FSYNCCOUNT}, %{VOLUMEFAILURES}, %{READBLOCKOPNUMOPS}, %{READBLOCKOPAVGTIME}, %{WRITEBLOCKOPNUMOPS}, %{WRITEBLOCKOPAVGTIME}, %{BLOCKCHECKSUMOPNUMOPS}, %{BLOCKCHECKSUMOPAVGTIME}, %{COPYBLOCKOPNUMOPS}, %{COPYBLOCKOPAVGTIME}, %{REPLACEBLOCKOPNUMOPS}, %{REPLACEBLOCKOPAVGTIME}, %{HEARTBEATSNUMOPS}, %{HEARTBEATSAVGTIME}, %{BLOCKREPORTSNUMOPS}, %{BLOCKREPORTSAVGTIME}, %{CACHEREPORTSNUMOPS}, %{CACHEREPORTSAVGTIME}, %{PACKETACKROUNDTRIPTIMENANOSNUMOPS}, %{PACKETACKROUNDTRIPTIMENANOSAVGTIME}, %{FLUSHNANOSNUMOPS}, %{FLUSHNANOSAVGTIME}, %{FSYNCNANOSNUMOPS}, %{FSYNCNANOSAVGTIME}, %{SENDDATAPACKETBLOCKEDONNETWORKNANOSNUMOPS}, %{SENDDATAPACKETBLOCKEDONNETWORKNANOSAVGTIME}, %{SENDDATAPACKETTRANSFERNANOSNUMOPS}, %{SENDDATAPACKETTRANSFERNANOSAVGTIME}"
			]
    }
    ruby {
      code => '
          require "time"
          event["heatmap"] = Time.parse(event["@timestamp"].to_s).strftime "%u-" + (Time.parse(event["@timestamp"].to_s).strftime "%a") + (Time.parse(event["@timestamp"].to_s).strftime ":%H-") + ((Time.parse(event["@timestamp"].to_s) + 60*60).strftime "%H");
		'
		}
	mutate {
		convert => [
			"DroppedPubAll", "integer",
			"NumAllSinks", "integer",
			"WritesFromRemoteClient", "integer",
			"CopyBlockOpNumOps", "integer",
			"LoginFailureNumOps", "integer",
			"WriteBlockOpNumOps", "integer",
			"FsyncNanosNumOps", "integer",
			"LoginSuccessNumOps", "integer",
			"VolumeFailures", "integer",
			"ThreadsWaiting", "integer",
			"NumActiveSources", "integer",
			"ThreadsTerminated", "integer",
			"ReadsFromRemoteClient", "integer",
			"SnapshotNumOps", "integer",
			"BlocksRemoved", "integer",
			"port", "integer",
			"SentBytes", "integer",
			"GcTimeMillis", "integer",
			"BlockVerificationFailures", "integer",
			"RpcAuthenticationSuccesses", "integer",
			"BlocksReplicated", "integer",
			"PublishNumOps", "integer",
			"BlocksCached", "integer",
			"FsyncCount", "integer",
			"BlocksRead", "integer",
			"SendDataPacketBlockedOnNetworkNanosNumOps", "integer",
			"RpcAuthenticationFailures", "integer",
			"SendDataPacketTransferNanosNumOps", "integer",
			"CacheReportsNumOps", "integer",
			"ThreadsBlocked", "integer",
			"LogWarn", "integer",
			"LogError", "integer",
			"BlockChecksumOpNumOps", "integer",
			"BlocksGetLocalPathInfo", "integer",
			"ReadsFromLocalClient", "integer",
			"ReplaceBlockOpNumOps", "integer",
			"BlocksVerified", "integer",
			"WritesFromLocalClient", "integer",
			"GetGroupsNumOps", "integer",
			"BlocksWritten", "integer",
			"BytesWritten", "integer",
			"NumActiveSinks", "integer",
			"NumAllSources", "integer",
			"RpcAuthorizationSuccesses", "integer",
			"BlockReportsNumOps", "integer",
			"BlocksUncached", "integer",
			"MarkSweep", "integer",
			"ThreadsNew", "integer",
			"Scavenge", "integer",
			"ThreadsRunnable", "integer",
			"ReadBlockOpNumOps", "integer",
			"NumOpenConnections", "integer",
			"FlushNanosNumOps", "integer",
			"GcCount", "integer",
			"RpcAuthorizationFailures", "integer",
			"BytesRead", "integer",
			"RpcProcessingTimeNumOps", "integer",
			"ThreadsTimedWaiting", "integer",
			"Sink_logstashNumOps", "integer",
			"RpcQueueTimeNumOps", "integer",
			"Sink_logstashDropped", "integer",
			"Sink_logstashQsize", "integer",
			"PacketAckRoundTripTimeNanosNumOps", "integer",
			"ReceivedBytes", "integer",
			"LogInfo", "integer",
			"CallQueueLength", "integer",
			"HeartbeatsNumOps", "integer",
			"LogFatal", "integer"		]
		}
	}
}
